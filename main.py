from crewai import Agent, Crew, Process, Task, LLM
from crewai.project import CrewBase, agent, crew, task

from dotenv import load_dotenv

from langchain_huggingface import HuggingFaceEmbeddings

from sentence_transformers import SentenceTransformer
import os

from tools import IntentClassifierTool

load_dotenv()


GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
XAI_API_KEY = os.getenv('XAI_API_KEY')


# Agente de Triagem (ser√° parte da "Crew de Entrada" ou da primeira etapa)
triage_agent = Agent(
    role='Analista de Inten√ß√µes do Cliente',
    goal='Analisar a mensagem inicial do cliente e classificar com precis√£o a sua principal inten√ß√£o para direcionar ao atendimento correto.',
    backstory=(
        "Voc√™ √© um especialista em atendimento ao cliente com um olhar agu√ßado para entender "
        "rapidamente o que o cliente precisa. Sua fun√ß√£o √© categorizar a solicita√ß√£o inicial "
        "para que ela seja tratada pela equipe mais adequada da empresa de rastreamento veicular."
    ),
    verbose=True,
    allow_delegation=False,
    tools=[IntentClassifierTool()], # O agente usa esta ferramenta
    llm=llm
)

# Agente de Atendimento Geral
general_support_agent = Agent(
    role='Especialista em Atendimento ao Cliente de Rastreamento Veicular',
    goal='Fornecer suporte informativo e resolver d√∫vidas gerais dos clientes sobre produtos, servi√ßos e quest√µes t√©cnicas b√°sicas da empresa de rastreamento.',
    backstory=(
        "Voc√™ √© um especialista experiente nos produtos e servi√ßos de rastreamento veicular. "
        "Seu objetivo √© ajudar os clientes, respondendo suas perguntas de forma clara e cordial, "
        "e orientando-os sobre o uso dos rastreadores, aplicativo e site. Voc√™ tem acesso √† base de conhecimento da empresa."
    ),
    verbose=True,
    allow_delegation=False, # Pode ser True se ele puder delegar para um agente de opera√ß√µes, por exemplo
    # tools=[SuaFerramentaRAG_Tool()], # Adicionar sua ferramenta RAG aqui
    llm=llm
)

# Agente de Vendas
sales_agent = Agent(
    role='Consultor de Vendas de Solu√ß√µes de Rastreamento',
    goal='Entender as necessidades dos clientes, apresentar as melhores solu√ß√µes de rastreamento, elaborar or√ßamentos e fechar vendas, aumentando a taxa de convers√£o.',
    backstory=(
        "Voc√™ √© um consultor de vendas proativo e persuasivo, especialista em transformar o interesse "
        "dos clientes em neg√≥cios fechados. Voc√™ conhece profundamente os planos, produtos e seus benef√≠cios, "
        "e sabe como destacar o valor das solu√ß√µes de rastreamento da empresa."
    ),
    verbose=True,
    allow_delegation=False,
    # tools=[SuaFerramentaRAG_Tool(), FerramentaDeGeracaoDeOrcamento_Tool()], # Adicionar ferramentas relevantes
    llm=llm
)


# --- Defini√ß√£o das Tasks ---

# Task de Triagem
triage_task = Task(
    description=(
        "Analise a seguinte mensagem do cliente: '{client_message}'. "
        "Usando a ferramenta 'Classificador de Inten√ß√£o do Cliente', determine a principal inten√ß√£o do cliente. "
        "As categorias de inten√ß√£o s√£o: 'SUPORTE_TECNICO', 'SOLICITACAO_ORCAMENTO', "
        "'DUVIDA_PRODUTO_SERVICO', 'FINANCEIRO', 'OUTROS'. "
        "Seu output final DEVE SER APENAS a string da categoria identificada (ex: 'SOLICITACAO_ORCAMENTO')."
    ),
    expected_output="Uma √∫nica string representando a categoria da inten√ß√£o do cliente (ex: 'SOLICITACAO_ORCAMENTO').",
    agent=triage_agent
)

# Task de Atendimento Geral (exemplo)
support_task = Task(
    description=(
        "O cliente entrou em contato com a seguinte d√∫vida/problema: '{client_message}'. "
        "A inten√ß√£o foi classificada como {client_intention}. "
        "Forne√ßa uma resposta clara e √∫til. Se for uma d√∫vida sobre produto/servi√ßo, explique detalhadamente. "
        "Se for um problema de suporte t√©cnico, ofere√ßa os primeiros passos para solu√ß√£o ou colete mais informa√ß√µes."
        # "Use a ferramenta RAG para buscar informa√ß√µes se necess√°rio."
    ),
    expected_output="Uma resposta completa e cordial para o cliente, abordando sua solicita√ß√£o de suporte ou d√∫vida.",
    agent=general_support_agent,
    context=[triage_task] # Esta task depende do resultado da task de triagem
)

# Task de Vendas (exemplo)
sales_task = Task(
    description=(
        "Um cliente demonstrou interesse em um or√ßamento ou em adquirir nossos servi√ßos. A mensagem inicial foi: '{client_message}'. "
        "A inten√ß√£o foi classificada como {client_intention}. "
        "Seu objetivo √© entender melhor as necessidades do cliente, apresentar os planos e produtos mais adequados e, se poss√≠vel, gerar um or√ßamento inicial ou agendar uma conversa."
        # "Use a ferramenta RAG para informa√ß√µes de produto e a ferramenta de or√ßamento."
    ),
    expected_output="Uma intera√ß√£o de vendas proativa, buscando entender as necessidades do cliente, apresentar solu√ß√µes e/ou um or√ßamento.",
    agent=sales_agent,
    context=[triage_task] # Esta task tamb√©m depende do resultado da task de triagem
)

# --- L√≥gica de Orquestra√ß√£o e Defini√ß√£o das Crews (Simplificado) ---

def run_customer_interaction(client_message: str):
    print(f"\nüí¨ Mensagem do Cliente: {client_message}")

    # 1. Executar a triagem para determinar a inten√ß√£o
    # Para isso, criamos uma "Crew de Triagem" tempor√°ria ou executamos a task diretamente
    # (CrewAI espera que tasks sejam executadas dentro de uma crew)
    
    triage_crew = Crew(
        agents=[triage_agent],
        tasks=[triage_task],
        process=Process.sequential,
        verbose=2
    )
    
    # O input para a task de triagem √© a mensagem do cliente
    # Usamos o m√©todo 'kickoff' e passamos os inputs necess√°rios para as tasks
    # As tasks devem ter placeholders como '{client_message}' em suas descri√ß√µes
    triage_result_map = triage_crew.kickoff(inputs={'client_message': client_message})
    
    # O resultado da task de triagem (e da crew) ser√° a inten√ß√£o classificada.
    # Acessando o resultado da √∫ltima task da crew de triagem:
    # Em vers√µes mais recentes de CrewAI, o resultado √© um dicion√°rio onde as chaves s√£o os nomes das tasks
    # ou uma string se for uma √∫nica task. Para m√∫ltiplas tasks, o resultado da crew
    # √© o resultado da √∫ltima task.
    # Se a task de triagem for a √∫nica, `triage_result_map` pode ser diretamente a string da inten√ß√£o.
    # Vamos assumir que o `kickoff` retorna o resultado da √∫ltima task se for uma string simples,
    # ou um dicion√°rio se a task retornar um output mais estruturado.
    # A `expected_output` da `triage_task` √© uma string, ent√£o esperamos uma string.
    
    # O resultado do kickoff √© o output da √∫ltima task da crew.
    # Como a triage_task tem "expected_output": "Uma √∫nica string...", o resultado √© a string.
    client_intention = triage_result_map 
    
    print(f"üß† Inten√ß√£o Identificada: {client_intention}")

    # 2. Direcionar para a Crew apropriada
    if client_intention == 'SOLICITACAO_ORCAMENTO':
        print("\nüöÄ Acionando Crew de Vendas...")
        vendas_crew = Crew(
            agents=[sales_agent], # Poderia ter mais agentes, ex: um para qualifica√ß√£o, outro para fechamento
            tasks=[sales_task],   # E mais tasks sequenciais ou hier√°rquicas
            process=Process.sequential,
            verbose=2
        )
        # Passamos a mensagem original e a inten√ß√£o para a task de vendas
        sales_interaction_result = vendas_crew.kickoff(inputs={
            'client_message': client_message,
            'client_intention': client_intention 
        })
        print("\n‚úÖ Resultado da Intera√ß√£o de Vendas:")
        print(sales_interaction_result)

    elif client_intention in ['SUPORTE_TECNICO', 'DUVIDA_PRODUTO_SERVICO', 'FINANCEIRO', 'OUTROS']:
        print("\nüõ†Ô∏è Acionando Crew de Atendimento Geral...")
        atendimento_crew = Crew(
            agents=[general_support_agent], # Poderia ter mais agentes
            tasks=[support_task],          # E mais tasks
            process=Process.sequential,
            verbose=2
        )
        # Passamos a mensagem original e a inten√ß√£o para a task de suporte
        support_interaction_result = atendimento_crew.kickoff(inputs={
            'client_message': client_message,
            'client_intention': client_intention
        })
        print("\n‚úÖ Resultado da Intera√ß√£o de Atendimento:")
        print(support_interaction_result)
    else:
        print(f"‚ö†Ô∏è Inten√ß√£o n√£o reconhecida ou n√£o mapeada para uma crew: {client_intention}")

# --- Simula√ß√£o de Intera√ß√µes ---
if __name__ == "__main__":
    # Exemplo 1: Solicita√ß√£o de Or√ßamento
    run_customer_interaction("Ol√°, gostaria de saber o pre√ßo do rastreador para carro e como contratar.")

    # Exemplo 2: Suporte T√©cnico
    run_customer_interaction("Bom dia, meu aplicativo n√£o est√° mostrando a localiza√ß√£o do meu ve√≠culo.")
    
    # Exemplo 3: D√∫vida sobre Produto
    run_customer_interaction("Voc√™s t√™m algum plano que cubra roubo e furto para motos?")
