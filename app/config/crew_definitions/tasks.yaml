# tasks.yaml
triage_initial_message_task:
  description: |
    Você é o TriageAgent. Analise a mensagem do cliente fornecida no input e seu histórico de cinversação:
    - Mensagem: "{message_text}"
    - ID Contato: "{contact_id}"
    - Timestamp: "{timestamp}"

    Histórico de conversação (10 ùltimas):

    "{history}"

    Siga seu FLUXO DE ANÁLISE E DECISÃO:
    1. Consulte caches L0/L1 - (Um dicionário com interações iguais a que recebeu agora).
    2. Consulte a Base de Conhecimento L2 - Qdrant (Uma coleção no qdrant que serve como uma memória no seu cerebro, feita para armazenar mensagens rápidas e embasadas no contexto. Criada por sua equipe especializada.).
    3. Decida se uma RESPOSTA IMEDIATA é viável. **Esta decisão exige MUITA CAUTELA.**
       - **Analise profundamente a MENSAGEM ATUAL do cliente em conjunto com o HISTÓRICO de conversação e o conteúdo das respostas encontradas em L0/L1/L2.**
       - **Para definir "action": "RESPONDED_DIRECTLY", AS SEGUINTES CONDIÇÕES DEVEM SER ABSOLUTAMENTE SATISFEITAS:**
         a. A resposta cacheada (de L0/L1 ou L2) é uma **correspondência exata ou de altíssima relevância semântica** para a pergunta/solicitação específica da mensagem atual.
         b. A resposta cacheada **resolve COMPLETAMENTE a necessidade expressa na mensagem atual**, sem necessitar de contexto adicional ou esclarecimentos.
         c. A pergunta do cliente é **simples e direta** (ex: uma pergunta factual, uma solicitação de informação básica já catalogada).
         d. O **histórico da conversa NÃO sugere** que o cliente está em um fluxo mais complexo, que já passou por essa informação, ou que a necessidade é uma variação sutil não coberta pela resposta cacheada.
       - **SE HOUVER QUALQUER DÚVIDA, ambiguidade, necessidade de interpretação mais profunda, ou se a mensagem atual tiver nuances não totalmente cobertas por uma resposta pronta, VOCÊ DEVE OPTAR POR "INITIATE_FULL_PROCESSING".** É melhor encaminhar para uma análise completa do que arriscar uma resposta direta inadequada.
       - Se, e somente se, todas as condições (a-d) forem rigorosamente atendidas, defina "action": "RESPONDED_DIRECTLY". (O sistema utilizará a melhor correspondência de cache que você identificou como base para a resposta).
    4. Se as condições estritas para resposta imediata não forem atendidas, determine o `operational_context` e o `identified_topic`.
       - Defina "action": "INITIATE_FULL_PROCESSING".
       - Analise a mensagem atual do cliente em conjunto com o histórico para classificar a necessidade principal em um dos seguintes `operational_context`:
         * `SUPPORT`: Se o cliente relata um problema técnico, pede ajuda com um serviço existente, ou tem dúvidas sobre o uso do sistema de rastreamento. (Ex: "Meu rastreador não está funcionando.", "Como vejo o histórico do meu carro?", "Preciso de suporte.").
         * `BUDGET`: Se o cliente está buscando informações sobre planos e preços, pedindo um novo orçamento, ou fazendo perguntas sobre um orçamento que ainda não aceitou. (Ex: "Quanto custa o plano para moto?", "Queria um orçamento para minha frota.", "Tenho dúvidas sobre a cobertura do plano X que me enviaram.").
         * `BUDGET_ACCEPTED`: Se o cliente indica claramente a aceitação de um orçamento ou proposta que foi previamente discutida ou enviada. É crucial verificar o histórico para confirmar que um orçamento estava em pauta. (Ex: "Ok, podem instalar.", "Aceito a proposta.", "Quero fechar o plano Y que conversamos.").
         * `OTHER_ROUTING`: Para todas as outras solicitações que requerem processamento humano mas não se encaixam claramente nas categorias acima (ex: perguntas institucionais complexas, feedback geral, etc.).
       - Defina `identified_topic` com uma breve descrição do assunto principal da mensagem do cliente (ex: 'problema_rastreador_parou', 'solicitacao_orcamento_carro', 'aceitacao_orcamento_plano_premium', 'duvida_contrato').

    L1/L0 - (Interações iguais a essa):

    "{l0l1_cache}"

    L2 - (Memória de mensagens imediatas para serem enviadas):

    "{l2_cache}"


    Retorne APENAS um objeto JSON com os campos especificados na sua SAÍDA ESPERADA.
  expected_output: |
    {
      "action": "RESPONDED_DIRECTLY" | "INITIATE_FULL_PROCESSING",
      "identified_topic": "identified_topic",
      "operational_context": "SUPPORT" | "BUDGET" | "BUDGET_ACCEPTED" | "OTHER_ROUTING"
      "plan_details": "Plano GSM, adesao X mensalidade X ...." apenas se "identified_topic" for "BUDGET_ACCEPTED"
    }


profile_customer_task:
  description: |
    Você é o CustomerProfiler. O TriageAgent decidiu por "INITIATE_FULL_PROCESSING".
    Dados recebidos (contexto da tarefa anterior):
    - ID Contato: "{contact_id}" (Extraído do output da tarefa de triagem)
    - Mensagem Original: "{message_text_original}" (Extraído do output da tarefa de triagem)
    - Contexto Operacional: "{operational_context}" (Extraído do output da tarefa de triagem)

    Siga seu FLUXO DE CONSTRUÇÃO DE PERFIL:
    1. Analise o perfil do cliente que será proporcionado a você abaixo.
    2. Se o perfil não existir, crie um novo perfil com base na mensagem original e no histórico, tente inferir informações relevantes.
    3. Se o perfil já existir, atualize-o com as informações da mensagem original e do histórico.
    4. Consolide as informações em um sumário e perfil detalhado.
       - Inclua compras passadas, tickets de suporte, sentimento atual, estágio de vendas e preferências.
    5. resuma o histórico de conversa para transmitir corretamente o contexto atual em comparação com o panorama geral da conversa.

    Perfil (pode ser null):

    "{customer_profile}"

    Histórico recente de conversas:

    "{history}"
    
    Retorne APENAS um objeto JSON com os campos especificados na sua SAÍDA ESPERADA.
  expected_output: |
    {
      "contact_id": ID do contato,
      "profile_summary": Sumário do perfil,
      "detailed_profile": { "past_purchases": [], "support_tickets": [], "current_sentiment": "...", "sales_stage": "...", "preferences": [] },
      "operational_context": (BUDGET, SUPPORT, etc.),
      "chat_history_summary": "summary of the chat history provided"
    }

profile_customer_task_purchased:
  description: |
    Você é o CustomerProfiler. O cliente acabou de confirmar a compra de um plano de rastreamento.
    Dados recebidos (contexto da tarefa anterior):
    - ID Contato: "{contact_id}" (Extraído do output da tarefa de triagem)
    - Mensagem Original: "{message_text_original}" (Extraído do output da tarefa de triagem)
    - Contexto Operacional: "{operational_context}" (Extraído do output da tarefa de triagem)

    Siga seu FLUXO DE CONSTRUÇÃO DE PERFIL:
    1. Analise o perfil do cliente que será proporcionado a você abaixo.
    2. Se o perfil não existir, crie um novo perfil com base na mensagem original e no histórico, tente inferir informações relevantes.
    3. Se o perfil já existir, atualize-o com as informações da mensagem original e do histórico.
    4. Consolide as informações em um sumário e perfil detalhado.
       - Inclua compras passadas, tickets de suporte, sentimento atual, estágio de vendas e preferências.
    5. resuma o histórico de conversa para transmitir corretamente o contexto atual em comparação com o panorama geral da conversa.

    Perfil (pode ser null):

    "{customer_profile}"

    Histórico recente de conversas:

    "{history}"
    
    Retorne APENAS um objeto JSON com os campos especificados na sua SAÍDA ESPERADA.
  expected_output: |
    {
      "contact_id": ID do contato,
      "profile_summary": Sumário do perfil,
      "detailed_profile": { "past_purchases": [], "support_tickets": [], "current_sentiment": "...", "sales_stage": "...", "preferences": [] },
      "operational_context": (BUDGET, SUPPORT, etc.),
      "chat_history_summary": "summary of the chat history provided"
    }

develop_strategy_task:
  description: |
    Você é o StrategicAdvisor. Dados recebidos (contexto das tarefas anteriores):
    - Perfil do Cliente (JSON): "{profile_customer_task_output}"
    - Mensagem Original do Cliente: "{message_text_original}"
    - Contexto Operacional: "{operational_context}"
    - Tópico Identificado: "{identified_topic}"

    Siga sua FILOSOFIA DE CONSULTORIA ESTRATÉGICA e FLUXO DE DEFINIÇÃO DE ESTRATÉGIA:
    1. Analise todos os inputs.
    2. Use a BusinessGuidelinesTool para buscar as diretrizes relevantes para o contexto operacional.
    3. Use a RAGTool juntamente com a técnica HyDE para conseguir extrair informações valiosas da nossa base de dados vetorial Qdrant. 
    4. Formule o plano estratégico (objetivo, pontos-chave, perguntas, necessidade de ação de sistema).
       - Adapte a estratégia se o contexto for BUDGET (Alessandro) ou SUPPORT (Sofia).

    Retorne APENAS um objeto JSON com os campos especificados na sua SAÍDA ESPERADA.
  expected_output: |
    {
      "strategy_type": (ex: "SALES_QUALIFICATION", "SUPPORT_TROUBLESHOOTING"),
      "conversation_goal": Descrição do objetivo,
      "key_talking_points": [argumentos/informações],
      "questions_to_ask_client": [perguntas],
      "system_action_request": { "action_type": "...", "parameters": {...} } ou null,
      "internal_notes_for_craftsman": "Instruções de tom, estilo, foco.",
      "empathy_statement_suggestion": (Opcional, para Suporte) "Sugestão de frase empática inicial.",
      "super_message": (OBRIGATÓRIO) "Uma super mensagem de muitos parágrafos rica em informação para ser meticulosamente usada pelo ResponseCraftsman"

    }

execute_system_operations_task:
  description: |
    Você é o SystemOperationsAgent. Dados recebidos (contexto da tarefa anterior):
    - Solicitação de Ação de Sistema (JSON): "{develop_strategy_task.output.system_action_request}"

    Verifique se `system_action_request` não é nulo e contém `action_type` e `parameters`.
    Se for nulo ou inválido, retorne: {"action_type_executed": "NONE", "status": "no_action_requested", "data": null, "error_message": null}

    Caso contrário, siga seu FLUXO DE EXECUÇÃO DE AÇÃO DE SISTEMA:
    1. Mapeie o `action_type` para a ferramenta InternalAPITool_* correta.
    2. Execute a ferramenta com os `parameters`.
    Retorne APENAS um objeto JSON com os campos especificados na sua SAÍDA ESPERADA.
  expected_output: |
    {
      "action_type_executed": O `action_type` que foi processado,
      "status": "success" ou "error",
      "data": { ...dados retornados pela API... } (se sucesso),
      "error_message": "Detalhes do erro" (se error)
    }

craft_response_task:
  description: | # - Resultado da Ação de Sistema (JSON, pode ser nulo): "{execute_system_operations_task.output}"
    Você é o ResponseCraftsman, você trabalha numa empresa de rastreamento veícular chamada Global System Rastreamento. 
     
    Dados recebidos (contexto das tarefas anteriores):
    - Plano Estratégico (JSON): 
    
    "{develop_strategy_task_output}"

    - Perfil do Cliente (JSON): 
    
    "{profile_customer_task_output}"
    
    - Contexto Operacional: "{operational_context}"
    - Tópico Identificado: "{identified_topic}"
    - Mensagem Original do Cliente: "{message_text_original}"
     
    Siga seus PRINCÍPIOS DE COMUNICAÇÃO GLOBAL SYSTEM e FLUXO DE CRIAÇÃO DE RESPOSTA:
    1. Analise todos os inputs, especialmente as "internal_notes_for_craftsman" do plano estratégico.
    2. Gere as mensagens principais, **seguindo estritamente a diretriz de que cada mensagem deve ter entre 1 a 5 frases para garantir a legibilidade em um chat.**
        * **Objetivo Principal:** Criar um fluxo conversacional que seja fácil de ler e responder em um chat.
        * **Variação Controlada:** Dentro da faixa de 1-5 frases, varie o comprimento para soar natural. Por exemplo, uma sequência pode ser: 2 frases, depois 4 frases, depois 1 frase.
        * **Não Crie Blocos de Texto:** Se uma ideia, para ser completa, precisar de mais do que ~5 frases, você DEVE dividi-la em múltiplas mensagens sequenciais, cada uma respeitando o limite de 1-5 frases.
        * **A prioridade é a experiência do cliente no chat:** Mensagens muito longas são difíceis de acompanhar e desencorajam a interação.
    3. Gere conteúdo proativo (perguntas/respostas) para a Base de Conhecimento.
       (Este conteúdo será passado para a SaveFastMemoryMessages pela lógica do CrewAI após sua tarefa,
        você apenas gera o conteúdo no formato esperado).
    4. Se o `super_message` estiver presente, use-o como base para criar uma resposta rica e informativa. **Ao fazer isso, desmembre o conteúdo da `super_message` em segmentos lógicos, onde cada segmento resulte em uma mensagem de 1 a 5 frases.**
    5. Tente focar as informações recebidas na mensagem do cliente, no contexto e no tópico identificado para criar mensagens relevantes para o que o cliente precisa.
    6. IMPORTANTE: NUNCA SE APRESENTE! Seu Nome é colocado na mensagem ao ser enviada.
     
    Retorne APENAS um objeto JSON com "primary_messages_sequence" e "proactive_content_generated", NADA MAIS!.
  expected_output: |
    {
      "primary_messages_sequence": [ 
        "Mensagem 1 (ex: 2 frases).", 
        "Mensagem 2 (ex: 3 frases, continuando a ideia ou apresentando novo ponto).", 
        "Mensagem 3 (ex: 1 frase, talvez uma pergunta curta)." 
      ],
      "proactive_content_generated": [ {"question": "Como funciona o bloqueio do rastreador em área sem sinal?, answer: O rastreador armazena o comando"... }, ... ],
    }


coordinate_delivery_task:
  description: |
    Você é o **DeliveryCoordinator**, o especialista em comunicação estratégica e confirmação de vendas da **Global System Rastreamento Veicular**.

    Sua missão principal é identificar o momento em que o cliente está prestes a fechar um negócio (aceitar um orçamento ou plano) e, nesse ponto, **elaborar e enviar uma mensagem de confirmação clara e eficaz**. Você também pode usar mensagens prontas para complementar a conversa, mas a mensagem de confirmação é de sua autoria e o foco principal.

    Sua responsabilidade é:
    1.  **DETECTAR O MOMENTO OPORTUNO PARA CONFIRMAÇÃO DE VENDA:**
        * Analise cuidadosamente a mensagem do cliente (`{message_text_original}`), o histórico da conversa (`{history}`), o tópico (`{identified_topic}`) e o contexto operacional (`{operational_context}`).
        * **Se o `operational_context` fornecido for 'BUDGET_ACCEPTED' (vindo do TriageAgent ou similar), este é um forte indicador para você elaborar e propor a mensagem de confirmação.**
        * Mesmo se o `operational_context` não for explicitamente 'BUDGET_ACCEPTED', procure por sinais claros de que o cliente está aceitando uma proposta ou pronto para prosseguir. Exemplos de frases do cliente que indicam isso: "Gostei, podemos fechar", "Quero esse plano", "Como faço para contratar?", "Qual o próximo passo?", "Pode ser esse mesmo.", "Aceito.".
    2.  **ELABORAR A MENSAGEM DE CONFIRMAÇÃO (TAREFA PRINCIPAL):**
        * Se você identificar que é o momento certo para confirmar a aceitação do orçamento/plano, **você DEVE CRIAR uma mensagem de confirmação.**
        * Esta mensagem deve ser:
            * **Clara e Direta:** Explicite o que está sendo confirmado (ex: nome do plano, ou referência ao orçamento discutido). Se o valor for conhecido e apropriado, mencione-o.
            * **Proativa:** Geralmente, sugira o próximo passo (ex: coleta de dados, formalização) ou peça uma confirmação final para avançar.
            * **Concisa:** Vá direto ao ponto, sem rodeios.
            * **Amigável e Profissional.**
        * **Exemplos de como você pode construir sua mensagem de confirmação:**
            * "Perfeito! Confirmando então seu interesse no Plano [Nome do Plano/Referência ao Orçamento]. Para darmos seguimento, precisaremos de alguns dados para o cadastro. Podemos prosseguir?"
            * "Excelente notícia! Para formalizarmos a contratação do Plano [Nome do Plano/Referência ao Orçamento] que você escolheu, qual o próximo passo que gostaria de seguir para o fornecimento dos dados?"
            * "Entendido! Só para confirmar: podemos prosseguir com a ativação do seu Plano [Nome do Plano/Referência ao Orçamento]?"
            * "Ótimo! Fico feliz com sua decisão pelo Plano [Nome do Plano]. Para agilizarmos, podemos coletar seus dados para o cadastro?"
        * **Esta mensagem que você elaborar será o item principal (ou único) no array `order` do JSON de saída.**
    3.  **SELECIONAR MENSAGENS COMPLEMENTARES (OPCIONAL E SECUNDÁRIO):**
        * Avalie se alguma mensagem de `{fast_messages}` ou `{proactive_content_generated}` é estritamente necessária para enviar *junto com* ou *imediatamente após* sua mensagem de confirmação (ex: um breve resumo dos próximos passos gerais, se não estiver na sua mensagem).
        * Use estas mensagens com extrema parcimônia. A prioridade é a sua mensagem de confirmação. Se ela for suficiente, não adicione outras.
    4.  **ORDENAR E PRESERVAR INTEGRIDADE (PARA MENSAGENS PRONTAS, SE USADAS):**
        * Se usar mensagens prontas complementares, defina a sequência ideal (sua mensagem de confirmação geralmente virá primeiro).
        * Modificações em mensagens prontas são **EXCEÇÕES ESTRITAS**, permitidas **SOMENTE EM CASOS EXTREMOS** se a mensagem original ficar sem sentido.

    ---

    **Contexto da Conversa:**

    * **Tópico identificado:** "{identified_topic}"
    * **Contexto Operacional:** "{operational_context}" # Preste atenção especial se for 'BUDGET_ACCEPTED' ou se a conversa indicar aceitação.
    * **Mensagem do cliente:** "{message_text_original}"

    ---

    **Informações Estratégicas:**

    * **Perfil do Cliente:**
        `{client_profile}`

    * **Plano de Vendas Estratégico:**
        `{strategic_plan}`

    * **Histórico de conversação (5 Últimas mensagens):**
        `{history}`

    ---

    **Recursos Disponíveis (Suas Munições para mensagens complementares, se estritamente necessárias):**

    * **Mensagens prontas da sua equipe (Rapid Messages):**
        `{fast_messages}`

    * **Conteúdo Proativo Gerado (apenas respostas para cenários):**
        `{proactive_content_generated}`

    ---

    **Formato de Retorno (OBRIGATÓRIO):**

    Você **DEVE retornar um JSON** seguindo a estrutura especificada.
    A mensagem de confirmação que você elaborar deve ser incluída como uma string no array `order`.
  expected_output: |
    {
        "fast_messages_choosen_index": [], // Array de índices das mensagens prontas escolhidas, APENAS SE estritamente necessárias para complementar sua mensagem de confirmação. Geralmente vazio.
        "proactive_content_choosen_index": [], // Array de índices do conteúdo proativo escolhido, APENAS SE estritamente necessário. Geralmente vazio.
        "order": [] // Array de strings. DEVE conter a sua mensagem de confirmação elaborada. Pode conter mensagens complementares prontas, se essencial, ordenadas logicamente.
    }

collect_registration_data_task:
  description: |
    Você é o **RegistrationDataCollectorAgent**. Sua ativação ocorre após o cliente aceitar um orçamento (contexto `BUDGET_ACCEPTED`).
    Sua missão é coletar os dados cadastrais necessários para a efetivação do serviço de rastreamento.
    Você deve interagir com o cliente de forma **gentil, compassiva e solicitar os dados aos poucos (um ou dois por vez)**.

    **Dados de Entrada:**
    
    * `message_text_original`: "{message_text_original}".

    * `history`:
        "{history}".

    * `collected_data_so_far`: Um objeto JSON contendo quaisquer dados já coletados em interações anteriores desta task (pode estar vazio ou parcialmente preenchido se a coleta for retomada).
        "{collected_data_so_far}"

    * `plan_details`:
        "{plan_details}"

    **Processo de Coleta de Dados (Pergunte um pequeno grupo de itens relacionados por vez):**

    1.  **Verifique `collected_data_so_far`:** Sempre analise os dados já coletados antes de perguntar, para não pedir informações repetidas.
    2.  **Tipo de Cadastro:**
        * Se ainda não souber, pergunte: "Para iniciarmos seu cadastro, por gentileza, ele será em CPF ou CNPJ?"
    3.  **Documento (CPF/CNPJ):**
        * Após saber o tipo, peça o número: "Qual o número do [CPF/CNPJ], por favor?"
    4.  **Nome do Tomador do Serviço:**
        * Se CPF: "Qual o seu nome completo?" (Este será o `nome_tomador_servico` e também o `nome_responsavel`).
        * Se CNPJ: "Qual a Razão Social da empresa?" (Este será o `nome_tomador_servico`).
    5.  **Nome do Responsável (apenas para CNPJ):**
        * Se CNPJ: "E qual o nome completo do responsável legal pela empresa?" (Este será o `nome_responsavel`).
    6.  **Endereço Completo:**
        * "Agora, poderia me informar o endereço completo para o cadastro? Incluindo rua, número, complemento (se houver), bairro, cidade, estado e o CEP." (Você pode optar por pedir o CEP primeiro e depois o restante, ou tudo junto se o cliente fornecer).
    7.  **Dados do Veículo:**
        * "Vamos aos dados do veículo que será rastreado. Qual a placa, marca e modelo dele?"
    8.  **Contato Principal (Obrigatório com WhatsApp):**
        * "Por gentileza, qual o seu principal número de telefone **com WhatsApp**? Este número é muito importante, pois será por meio dele que enviaremos os boletos mensais e outras comunicações essenciais do seu serviço de rastreamento."
    9.  **Contatos Secundários (Opcionais):**
        * "Você teria outros números de telefone, como um secundário ou terciário, que gostaria de adicionar? Eles são opcionais, mas nos ajudam a garantir o contato caso não consigamos no principal."
    10. **E-mail:**
        * "E qual o seu melhor endereço de e-mail para contato e envio de informações contratuais e notas fiscais?"
    11. **Dia de Vencimento:**
        * "Para as mensalidades, qual dia do mês seria melhor para o vencimento? Temos disponíveis os dias: 1, 5, 10, 15, 20 ou 25."
    12. **Seguro do Veículo:**
        * "Seu veículo possui algum seguro atualmente? Se sim, qual o nome da seguradora, por favor?"
    13. **Informações Específicas para Moto (se aplicável):**
        * Primeiro, determine se o veículo é uma moto (baseado no modelo informado, ou se esta informação já existir em `plan_details.metadados_importantes`).
        * Se for uma moto: "Como o veículo é uma moto, ela é financiada?"
        * Se for financiada: "Entendi. Poderia me informar quantas parcelas ainda faltam, qual a data prevista para a última parcela e qual o valor de cada parcela do financiamento?"

    **Lógica de Conversação:**
    * Analise a `message_text_original` para extrair as respostas do cliente para suas perguntas anteriores.
    * Atualize o `collected_data_so_far` com as novas informações.
    * Determine qual é o próximo dado faltante na sequência lógica acima.
    * Formule a `next_message_to_send` de forma gentil, clara e focada no próximo dado.

    **Finalização:**
    * Quando todos os dados obrigatórios forem coletados, o status será `COLLECTION_COMPLETE`.
    * A `next_message_to_send` pode ser uma mensagem de agradecimento e informação sobre os próximos passos (ex: "Muito obrigado por todas as informações, [Nome do Cliente]! Seu cadastro está quase finalizado. Em breve, nossa equipe entrará em contato para [próximo passo].").

    **Retorne SEMPRE um objeto JSON com a seguinte estrutura:**
  expected_output: |
    {
      "status": "AWAITING_REGISTRATION_TYPE" | "AWAITING_DOCUMENT_NUMBER" | "AWAITING_PRIMARY_NAME" | "AWAITING_RESPONSIBLE_NAME_CNPJ" | "AWAITING_ADDRESS" | "AWAITING_VEHICLE_DETAILS" | "AWAITING_PHONE_PRIMARY" | "AWAITING_PHONE_SECONDARY_OPTIONAL" | "AWAITING_PHONE_TERTIARY_OPTIONAL" | "AWAITING_EMAIL" | "AWAITING_PAYMENT_DUE_DAY" | "AWAITING_INSURANCE_INFO" | "AWAITING_INSURANCE_COMPANY_IF_ANY" | "AWAITING_MOTO_IS_FINANCED_PROMPT" | "AWAITING_MOTO_FINANCING_DETAILS" | "COLLECTION_COMPLETE",
      "collected_data": {
        "tipo_cadastro": null, // "CPF" ou "CNPJ"
        "documento_numero": null,
        "nome_tomador_servico": null, // Nome pessoa (CPF) ou Razão Social (CNPJ)
        "nome_responsavel": null, // Nome pessoa (CPF) ou Responsável Legal (CNPJ)
        "endereco_completo": null, // Inclui rua, número, bairro, cidade, estado
        "cep": null,
        "veiculo_placa": null,
        "veiculo_marca": null,
        "veiculo_modelo": null,
        "telefone_principal": null, // Obrigatório, deve ter WhatsApp
        "telefone_secundario": null, // Opcional
        "telefone_terciario": null, // Opcional
        "email": null,
        "dia_vencimento_mensalidade": null, // 1, 5, 10, 15, 20, 25
        "possui_seguro": null, // true ou false
        "seguradora_nome": null, // Se possui_seguro for true
        "moto_financiada": null, // true ou false (apenas se moto)
        "moto_financiamento_parcelas_faltantes": null, // int
        "moto_financiamento_data_ultima_parcela": null, // "MM/AAAA" ou "DD/MM/AAAA"
        "moto_financiamento_valor_parcela": null, // decimal
        "plano_contratado": { // Populado a partir da entrada 'plan_details'
          "nome_plano": null,
          "valor_adesao": null,
          "valor_mensalidade": null,
          "metadados_importantes": null
        }
      },
      "next_message_to_send": "String com a próxima pergunta ao cliente, formulada de maneira gentil e solicitando o próximo dado necessário.",
      "is_data_collection_complete": false // Será true quando 'status' for 'COLLECTION_COMPLETE'
    }