context_analysis_task:
  description: |
    <INSTRUCTIONS>
      1.  **Analyze Inputs:** Review the provided `{{conversation_state}}` and `{{client_message}}`.
      2.  **Execute Logic:** Apply the `<LOGIC_FLOW>` and `<RULES>` defined in your backstory to determine the output values.
      3.  **Handle System Actions:** If the client requests a system action AND `is_plan_acceptable` is true, populate the `system_action_request` field with a natural language description of the required action. Otherwise, leave it null.
          -   **Condition:** ONLY if `is_plan_acceptable` is true AND the user's intent is an OBVIOUS request for one of the capabilities listed below, populate `system_action_request`.
          -   **Content:** The request must be a clear, natural language description of the action needed.
          -   **Default:** In all other cases, `system_action_request` MUST be `null`.
      4.  **Determine Budget Status:** If the client gives a clear and direct signal of accepting a budget, set `budget_accepted` to true. Otherwise, set it to false.
      5.  **Format Output:** Construct the final JSON output according to the `expected_output` schema.
    </INSTRUCTIONS>

    <SYSTEM_ACTIONS_CATALOG>
      - **Client/Financial:** Search clients in the database (to get precious information), get a client's vehicles, get financial history.
      - **Vehicle Reports:** Search vehicles in the database (to get precious information), get vehicle details, get position history, get trip/event reports, get geofences.
      - **Vehicle Commands:** Send a reset command to a tracker, this action reboots it and aim to solve communication issues.
    </SYSTEM_ACTIONS_CATALOG>

    <INPUT_DATA>
      - `conversation_state`: 
          {conversation_state}
      - `client_message`: 
          {client_message}
      - `history`: 
          {history}
      - `turn`: {turn}
    </INPUT_DATA>
  expected_output: |
    {
      "action": "PROCEED_WITH_EXISTING_PLAN | INITIATE_NEW_STRATEGIC_PLAN",
      "is_plan_acceptable": <boolean>,
      "operational_context": "BUDGET | BUDGET_ACCEPTED | CUSTOMER_SERVICE | SUPPORT",
      "budget_accepted": <boolean>,
      "system_action_request": "<Natural language request for system action>" | null,
      "identified_topic": "<A short, descriptive topic name for the conversation>"
    }

develop_strategy_task:
  description: |
    <INSTRUCOES>
      1.  **Executar Lógica Principal:** Siga rigorosamente o `<LOGIC_FLOW>` e as `<RULES>` definidos em seu `backstory`.
      2.  **Analisar Inputs:** Utilize os dados fornecidos na seção `<DADOS>` para sua análise.
      3.  **Construir Dossiê:** Crie o `conversation_blueprint` de forma rica e estratégica, conforme as regras.
      4.  **Atualizar Estado:** Popule o `disclosure_checklist` e prepare o `updated_state`.
      5.  **Gerar Saída:** Formate sua resposta final como um único objeto JSON, seguindo o `expected_output`. A saída deve ser em Português do Brasil.
    </INSTRUCOES>

    <SYSTEM_ACTIONS_CATALOG>
      - **Client/Financial:** Search clients in the database (to get precious information), get a client's vehicles, get financial history.
      - **Vehicle Reports:** Search vehicles in the database (to get precious information), get vehicle details, get position history, get trip/event reports, get geofences.
      - **Vehicle Commands:** Send a reset command to a tracker, this action reboots it and aim to solve communication issues.
    </SYSTEM_ACTIONS_CATALOG>

    <DADOS>
      - `conversation_state`: 
          {conversation_state}
      - `profile_customer_task_output`: 
          {profile_customer_task_output}
      - `client_message`: {client_message}
      - `operational_context`: {operational_context}
      - `history`: 
          {history}
      - `history_raw`: 
          {history_raw}
      - `turn`: {turn}
      - `timestamp`: {timestamp}
    </DADOS>
  expected_output: |
    {
      "task_output": {
        "system_action_request": "<String em linguagem natural para ação de sistema ou null>",
        "conversation_blueprint": {
          "customer_context_summary": {
            "relevant_profile_insights": "<Análise concisa do perfil de longo prazo do cliente>",
            "insights_from_current_session": "<Análise da sessão atual e da última mensagem do cliente>"
          },
          "product_presentation_strategy": {
            "presentation_order": ["<Array ordenado de nomes de planos a apresentar>"],
            "primary_offer": {
              "plan_name": "<Nome do plano principal>",
              "sales_angle": "<Estratégia de venda e argumentos para a oferta principal>"
            },
            "secondary_offer": {
              "plan_name": "<Nome do plano secundário>",
              "sales_angle": "<Estratégia de venda para a oferta secundária>"
            }
          },
          "communication_guidance": {
            "tone_and_style": "<Tom e estilo recomendados para a comunicação>",
            "key_talking_points": ["<Array de pontos chave a serem mencionados>"],
            "key_questions_to_ask": ["<Array de perguntas chave a serem feitas>"],
            "next_step_preview": "<Breve descrição do próximo passo esperado na conversa>"
          },
          "information_payload": {
            "<plan_name_data>": {
              "pricing": "<Estrutura de preços do plano>",
              "contract_terms": "<Termos contratuais relevantes>",
              "technical_limitations": "<Limitações técnicas a serem informadas>"
            }
          }
        }
      },
      "updated_state": {
        "disclosure_checklist": [
          {
            "item_id": "<id_unico_do_item>",
            "topic": "<Tópico do termo a ser esclarecido>",
            "content": "<Conteúdo exato do termo obtido da base de conhecimento>",
            "status": "pending"
          },
          ... (outros itens de checklist)
        ]
      }
    }



execute_system_operations_task:
  description: |
    <INSTRUCOES>
      1.  **Executar Lógica Principal:** Siga rigorosamente o `<LOGIC_FLOW>` e as `<RULES>` definidos em seu `backstory` para processar a `{action_requested}`.
      2.  **Analisar Inputs:** Utilize os dados fornecidos na seção `<DADOS>` para obter os parâmetros necessários para suas `queries`.
      3.  **Gerar Saída:** Formate sua resposta final como um único objeto JSON, seguindo ESTRITAMENTE a estrutura definida em `expected_output`. A `synthesis` e `message_to_user` devem ser em Português do Brasil.
    </INSTRUCOES>

    <DADOS>
      - `action_requested`: {action_requested}
      - `conversation_state`: 
          {conversation_state}
      - `customer_profile`: 
          {customer_profile}
      - `history`: 
          {history}
      - `history_raw`: 
          {history_raw}
      - `client_message`: {client_message}
      - `customer_name`: {customer_name}
    </DADOS>  
  expected_output: |
      {
        "status": "ACTION_COMPLETE | INSUFFICIENT_DATA",
        "synthesis": "<Síntese em Português conectando os resultados das operações. Ex: 'O cliente Juan (ID: 123) está adimplente. O veículo de placa ABC-1234 não se comunica há 48 horas.'>",
        "message_to_user": "<Mensagem em Português para o cliente, apenas se 'status' for 'INSUFFICIENT_DATA'. Ex: 'Para continuar, por favor, informe a placa do veículo.'>" | null,
        "data_payload": {
          "customer_id": "<id do cliente>",
          "is_payment_due": "<boolean>",
          "vehicle_status_summary": "<Sumário do status do veículo>"
          ... Essa chave não é padronizada. Pode ser qualquer informação relevante. Você é o especialista em criar essas chaves.
        },
        "follow_up_suggestions": [
          "<Array de strings com sugestões de próximas ações lógicas, se houver.>"
        ]
      }


communication_task:
  description: |
    <INSTRUCOES>
      1.  **Executar Lógica Principal:** Siga rigorosamente o `<LOGIC_FLOW>` e as `<RULES>` definidos em seu `backstory`. Lembre-se, seu objetivo é uma conversa natural, criativa e concisa.
      2.  **Analisar Inputs:** Utilize os dados da seção `<DADOS>`, com foco principal no `develop_strategy_task_output` (o dossiê).
      3.  **Gerar Saída:** Construa o JSON de saída, seguindo ESTRITAMENTE a estrutura e a qualidade do exemplo em `expected_output`. A `messages_sequence` deve ser uma conversa natural, fluida e em Português do Brasil.
    </INSTRUCOES>

    <DADOS>
      - `develop_strategy_task_output`: 
          {develop_strategy_task_output}
      - `system_operations_task_output`: 
          {system_operations_task_output}
      - `conversation_state`: 
          {conversation_state}
      - `disclosure_checklist`: 
          {disclosure_checklist}
      - `recently_sent_catalogs`: 
          {recently_sent_catalogs}
      - `client_message`: 
          {client_message}
    </DADOS>

  expected_output: |
    {
      "task_output": {
        "request_human_intervention": false,
        "messages_sequence": [
          "Juan, entendi sua preocupação com a segurança da sua moto, já que a usa para tudo.",
          "Com base nisso, nossa recomendação principal é o Plano Proteção Total PGS.",
          "O grande diferencial dele é a tranquilidade da proteção financeira.",
          "Se sua moto for roubada e não a recuperarmos, você recebe o valor dela pela tabela FIPE.",
          "Um ponto importante, para total transparência: nosso serviço é de rastreamento com essa garantia de reembolso, não um seguro tradicional.",
          "Essa abordagem com foco total na sua segurança faz sentido para você?"
        ],
        "plan_names": ["Plano Proteção Total PGS"]
      },
     "updated_state": {
        "products_discussed": [
          {
            "plan_name": "Plano Rastreamento Moto",
            "details_provided": ["pricing"],
            "presented_at_turn": 4
          }
        ],
        "disclosure_checklist": [
          {
          "item_id": "natureza_servico_pgs",
          "topic": "Natureza do Serviço (Plano PGS)",
          "content": "Este contrato NÃO é um seguro, mas em caso de NÃO recuperação da motocicleta, haverá REEMBOLSO do valor da motocicleta de acordo com a tabela FIPE, respeitando o valor máximo do plano contratado.",
          "status": "pending"
          },
          {
            "item_id": "responsabilidade_recuperacao",
            "topic": "Responsabilidade de Recuperação",
            "content": "A recuperação do veículo é atividade única e exclusiva das autoridades policiais.",
            "status": "communicated"
          },
        ],
      }
    }

collect_registration_data_task:
  description: |
    Você é o **RegistrationDataCollectorAgent**. Sua missão é continuar o processo de coleta de dados cadastrais.

    Timestamp: "{timestamp}"
    Now Turn: "{turn}"
    
    **DADOS PARA SUA ANÁLISE:**
    - **Estado da Conversa (Seu Contexto):** # Use para personalizar a conversa (ex: usar o nome do cliente de `entities_extracted`) e para entender o ponto em que a coleta parou. 
    
    `{conversation_state}`
      
    - **Última Mensagem do Cliente (Sua Resposta):** 
    
    "{client_message}"
    
    - **Dados Já Coletados (Seu Progresso):** 
    
    `{collected_data_so_far}`
      # Um objeto JSON que você mesmo está construindo turno a turno.
    
    - **Detalhes do Plano Contratado:** "{plan_details}"

    **SEU FLUXO DE TRABALHO:**
    **SEU PROCESSO DE COLETA DE DADOS (AGRUPADO):**
    1.  **Analise a mensagem do cliente:** para extrair as respostas do cliente.
    2.  **Atualize o objeto `{collected_data_so_far}`** com os novos dados.
    3.  **Verifique os dados que ainda faltam e formule a próxima pergunta em blocos maiores para agilizar.**
        - **BLOCO 1 (Identificação):** Peça `tipo_cadastro`, `nome_tomador_servico` e `documento_numero` juntos, após saber se é CPF ou CNPJ.
        - **BLOCO 2 (Localização e Contato):** Peça `endereco_completo`, `cep`, `telefone_principal` com WhatsApp e `email` juntos.
        - **BLOCO 3 (Veículo e Preferências):** Peça os dados do veículo (`placa`, `marca`, `modelo`) e o `dia_vencimento_mensalidade` juntos.
    4.  **Valide as Informações:** Ao receber o dia de vencimento, certifique-se de que seja um dos dias permitidos: **1, 5, 10, 15, 20 ou 25**. Se o cliente sugerir outro dia, informe gentilmente as opções disponíveis.
    5.  **Finalização:** Quando todos os dados obrigatórios forem coletados, sua tarefa principal é definir o `"status": "COLLECTION_COMPLETE"` na sua saída.
    6.  **Atualize e Retorne:** Prepare o `task_output` com o status e os dados da coleta, e retorne o `{conversation_state}` atualizado.


    Retorne APENAS um objeto JSON, seguindo EXATAMENTE a estrutura do exemplo em `expected_output`.
    NÃO adicione comentários no JSON final.
    o `excpected_output` é um exemplo de saída esperada.
  expected_output: |
    {
      "task_output": {
        "status": "<Status da coleta, ex: AWAITING_DOCUMENT_NUMBER ou COLLECTION_COMPLETE>",
        "client_intent": "data_collection",
        "collected_data": {
          "tipo_cadastro": "<CPF ou CNPJ>",
          "documento_numero": "<Número do documento>",
          "nome_tomador_servico": "<Nome completo ou Razão Social>",
          "endereco_completo": "<Endereço completo>",
          "cep": "<CEP>",
          "veiculo_placa": "<Placa do veículo>",
          "veiculo_marca": "<Marca do veículo>",
          "veiculo_modelo": "<Modelo do veículo>",
          "telefone_principal": "<Telefone com WhatsApp>",
          "email": "<Email>",
          "dia_vencimento_mensalidade": "<Dia do vencimento validado (1, 5, 10, 15, 20, 25)>",
          "plano_contratado": {
            "nome_plano": "<Nome do plano contratado>",
            "valor_adesao": "<Valor da adesão>",
            "valor_mensalidade": "<Valor da mensalidade>"
          }
        },
        "next_message_to_send": "Perfeito, Juan! Cadastro em CPF. Agora, por favor, poderia me informar seu nome completo e o número do seu CPF?",
        "is_data_collection_complete": "<boolean>"
      },
      "updated_state": {
        "entities_extracted": [
          { "entity": "<nome da entidade>", "value": "<valor extraído>", "turn": "<número do turno>" }
        ]
      }
    }


summarize_history_task:
  description: |
    Você é o HistorySummarizerAgent. Sua missão é ATUALIZAR um resumo de histórico com novas mensagens.

    **DADOS PARA SUA ANÁLISE INCREMENTAL:**
    - **ID do Contato:** `{contact_id}`
    - **Resumo Existente (pode ser nulo):** `{existing_summary}`
    - **Novas Mensagens para Processar:** `{new_messages}`
    - **Histórico Bruto Completo (APENAS PARA CONTEXTO DE ÍNDICES):** `{full_raw_history}`

    **SEU FLUXO DE TRABALHO:**
    1.  Siga o "PROCESSO DE ATUALIZAÇÃO INCREMENTAL" detalhado em seu backstory.
    2.  Se `existing_summary` for nulo, crie o resumo inicial a partir do zero, usando `new_messages`.
    3.  Se houver um `existing_summary`, analise as `new_messages` para atualizar, estender ou criar novos tópicos.
    4.  Lembre-se de que `start_index` e `end_index` em sua saída DEVEM corresponder aos índices do `full_raw_history`.

  expected_output: |
    Um objeto JSON contendo a chave `topic_details`.
    - `topic_details`: A lista COMPLETA e ATUALIZADA de objetos de tópico, incluindo os tópicos antigos, os que foram modificados e quaisquer novos tópicos criados. A estrutura de cada objeto de tópico permanece a mesma.
  

clean_noisy_data_task:
  description: |
    Você é o DataQualityAgent. Sua missão é limpar um tópico de conversa marcado como ruidoso.

    **DADOS PARA SUA ANÁLISE:**
    - **ID do Contato:** `{contact_id}`
    - **ID do Tópico:** `{topic_id}`
    - **Trecho do Histórico Bruto Relevante (Seu Foco):** `{raw_history_snippet}`
    - **Histórico Bruto Completo (Seu Contexto):** `{full_raw_history}`

    **SEU FLUXO DE TRABALHO:**
    1.  Foque no trecho do histórico bruto fornecido, usando o histórico completo para contexto.
    2.  Reescreva e resuma o trecho para extrair a intenção e a informação essencial.
  expected_output: |
    A JSON object with two keys: `cleaned_summary` and `cleaned_details`.
    - `cleaned_summary`: A string with the corrected summary.
    - `cleaned_details`: A string with the corrected full details.

summarize_state_task:
  description: |
    Você é o **Analista de Evolução de Conversa**. Sua tarefa é executar o processo analítico definido em seu backstory para produzir um `updated_state` rico em insights.

    ---

    **DADOS PARA SUA ANÁLISE COMPARATIVA:**
    - **Estado do Último Turno (O Presente):** 
    
    `{last_turn_state}`

    - **Resumo do Histórico (O Passado):** 
    
    `{history_summary}`

    - **Mensagem do Último Turno:**

    `{client_message}`

    ---

    **SEU FLUXO DE TRABALHO ANALÍTICO:**
    1.  **Execute a ANÁLISE COMPARATIVA:** Conforme seu backstory, compare o histórico com o último turno para identificar deltas, como mudanças de intenção, sentimento ou foco.
    2.  **Execute a GERAÇÃO DE INSIGHTS:** Com base na sua análise, enriqueça o estado. Crie um `session_summary` que destaque a evolução da conversa e adicione novos metadados (ex: `intent_shift: true`, `new_concerns_raised: true`) se aplicável.
    3.  **Construa o `updated_state`:** Monte o objeto de estado final, garantindo que ele inclua todos os dados originais, mais os novos insights e metadados que você gerou. Lembre-se da regra de imutabilidade do `strategic_plan` e de `disclosure_checklist`.
  expected_output: "Um objeto JSON completo e enriquecido que segue estritamente a estrutura do modelo ConversationState. O objeto deve conter não apenas os dados fundidos, mas também os novos metadados e insights gerados a partir da sua análise comparativa."

enhance_profile_task:
  description: |
    Você é o **Arquiteto de Inteligência do Cliente**. Sua missão é executar o processo criativo detalhado em seu backstory para forjar o "Client 360° Blueprint".

    ---
    **DADOS PARA SUA ANÁLISE PROFUNDA:**
    - **Resumo do Histórico (A Jornada Passada):** `{history_summary}`
    - **Estado do Último Turno (O Momento Presente):** `{last_turn_state}`
    - **Perfil Existente (A Memória de Longo Prazo):** `{existing_profile}`
    - **Mensagem do Cliente (O Gatilho Atual):** `{client_message}`
    ---

    **SEU FLUXO DE TRABALHO CRIATIVO:**
    1.  **Construa a Identidade do Cliente:** Capture os dados básicos e, mais importante, o estilo de comunicação observado.
    2.  **Escreva a História Até Agora:** Crie um `executive_summary` narrativo e uma `interaction_timeline` com os momentos cruciais.
    3.  **Mergulhe na Mente do Cliente:** Vá além do óbvio. Infira as `primary_motivations`, `known_frustrations` e `key_interests` que definem o perfil psicológico do cliente.
    4.  **Defina a Missão Atual:** Qual é o `immediate_goal`? Quais `pending_quests` existem? E quais `information_gaps` precisamos preencher?
    5.  **Desenhe o Playbook Estratégico:** Forneça um `recommended_next_move` claro, um `conversation_path` sugerido, `potential_pitfalls` a serem evitados e `golden_opportunities` para encantar ou avançar na negociação.
    6.  **Sua saída final DEVE SER um único objeto JSON chamado `client_360_blueprint`**, seguindo o exemplo espetacular abaixo.

  expected_output: |
    {
      "client_360_blueprint": {
        "client_identity": {
          "contact_id": "71464be80c504971ae263d710b39dd1f",
          "contact_name": "Juan - Desenvolvimento",
          "phone_number": "555198906538",
          "communication_style": "Prefere texto, direto ao ponto, usa mensagens curtas e pode ser impaciente se a solução demorar."
        },
        "the_story_so_far": {
          "executive_summary": "Juan é um cliente tecnicamente inclinado que gerencia múltiplos veículos e está avaliando a Global System para uma possível parceria de frota. Ele demonstrou forte interesse em funcionalidades avançadas e no 'Plano Proteção Total PGS'. O ponto de bloqueio atual é um problema não especificado em nosso aplicativo, que interrompeu uma negociação de orçamento em andamento. A resolução deste problema técnico é a chave para reconquistar sua confiança e reabrir a oportunidade de negócio.",
          "interaction_timeline": [
            { "date": "2025-06-26", "event": "Primeiro contato, interesse no Plano PGS e verificação do status do seu dispositivo atual." },
            { "date": "2025-06-27", "event": "Solicitou um orçamento para múltiplos veículos, indicando um potencial de frota." },
            { "date": "2025-06-28", "event": "Listou funcionalidades de aplicativo que considera essenciais, como relatórios e geofencing." },
            { "date": "2025-06-30", "event": "Relatou, de forma sucinta ('?'), um problema no aplicativo, pausando todas as outras discussões." }
          ]
        },
        "clients_mindset": {
          "primary_motivations": [
            "Eficiência operacional através de tecnologia (app e relatórios).",
            "Segurança dos ativos (interesse em bloqueio, monitoramento e reembolso FIPE).",
            "Custo-benefício para uma frota de veículos."
          ],
          "known_frustrations": [
            "Aplicativos que não funcionam como esperado.",
            "Respostas lentas ou genéricas para problemas técnicos."
          ],
          "key_interests": [
            "Plano Proteção Total PGS",
            "Funcionalidades avançadas do aplicativo (geofencing, relatórios, etc.)",
            "Orçamento para múltiplos veículos."
          ]
        },
        "current_mission": {
          "immediate_goal": "Resolver o problema que está enfrentando no aplicativo.",
          "pending_quests": [
            "Receber um orçamento competitivo para sua frota de veículos.",
            "Entender a fundo os benefícios e custos dos planos oferecidos."
          ],
          "information_gaps": [
            "Qual é o problema exato no aplicativo (mensagem de erro, ação que falha)?",
            "Detalhes dos veículos da frota (tipo, modelo, ano) para o orçamento."
          ]
        },
        "strategic_playbook": {
          "recommended_next_move": "Focar 100% em diagnosticar o problema do aplicativo. Fazer perguntas diretas e claras para obter os detalhes necessários.",
          "conversation_path": [
            "1. Mostre empatia e urgência em resolver o problema do app.",
            "2. Faça as perguntas de diagnóstico (erro, versão do app, SO).",
            "3. Ofereça uma solução ou escale para o suporte técnico.",
            "4. APENAS APÓS a resolução (ou encaminhamento claro), retome suavemente o tópico do orçamento pendente."
          ],
          "potential_pitfalls": [
            "Ignorar o problema do app e tentar vender.",
            "Dar respostas genéricas de 'reinstale o app' sem diagnóstico.",
            "Demorar para responder, aumentando sua frustração."
          ],
          "golden_opportunities": [
            "Resolver o problema rapidamente para demonstrar eficiência e ganhar confiança.",
            "Usar o gancho do orçamento da frota para reengajar após a solução do problema.",
            "Oferecer uma demonstração das funcionalidades do app que ele valoriza assim que o problema for resolvido."
          ]
        }
      }
    }
